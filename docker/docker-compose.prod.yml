services:
  db:
    image: postgres:16-alpine
    container_name: censorly_db
    env_file:
      - ../.env.prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    # ports: ["55432:5432"]
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4
    container_name: censorly_pgadmin
    env_file:
      - ../.env.prod
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: censorly_redis
    env_file:
      - ../.env.prod
    command:
      [
        "redis-server",
        "--appendonly",
        "yes",
        "--requirepass",
        "${REDIS_PASSWORD}",
      ]
    # ports: ["6379:6379"]
    volumes:
      - redisdata:/data
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    container_name: censorly_minio
    env_file:
      - ../.env.prod
    command: server /data --console-address ":9101"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    # ports:
    #   - "9100:9000"
    #   - "9101:9101"
    volumes:
      - miniodata:/data
    restart: unless-stopped

  api:
    build:
      context: ..
      dockerfile: docker/api.Dockerfile
    container_name: censorly_api
    env_file:
      - ../.env.prod
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started
    ports: ["8100:8000"]
    restart: unless-stopped
    command: python -m uvicorn apps.api.main:app --host 0.0.0.0 --port 8000

  web:
    build:
      context: ..
      dockerfile: docker/web.Dockerfile
      args:
        VITE_API_URL: /api
    container_name: censorly_web
    env_file:
      - ../.env.prod
    depends_on:
      api:
        condition: service_started
    ports: ["8101:80"]
    restart: unless-stopped

  # worker:
  #   build:
  #     context: ..
  #     dockerfile: docker/worker.Dockerfile
  #   container_name: censorly_worker
  #   env_file:
  #     - ../.env.prod
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #     redis:
  #       condition: service_started
  #     minio:
  #       condition: service_started
  #   working_dir: /app
  #   command: ["python", "apps/worker/main.py"]
  #   restart: unless-stopped

volumes:
  pgdata:
  redisdata:
  miniodata:
